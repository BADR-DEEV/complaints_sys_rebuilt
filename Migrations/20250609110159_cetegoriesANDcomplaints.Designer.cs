// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using complaints_back.Data;

#nullable disable

namespace complaints_back.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250609110159_cetegoriesANDcomplaints")]
    partial class cetegoriesANDcomplaints
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("complaints_back.models.Categories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AR_Des")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AR_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AR_Des = "أخذ ممتلكات شخص آخر دون إذن أو حق قانوني.",
                            AR_Name = "سرقة",
                            Description = "Taking someone else's property without permission or legal right.",
                            Name = "Theft"
                        },
                        new
                        {
                            Id = 2,
                            AR_Des = "سلوك مسيء أو مهين أو مهدد يستهدف فردًا.",
                            AR_Name = "تحرش",
                            Description = "Offensive, humiliating, or threatening behavior targeted at an individual.",
                            Name = "Harassment"
                        },
                        new
                        {
                            Id = 3,
                            AR_Des = "هجوم جسدي أو تهديد بالعنف ضد شخص.",
                            AR_Name = "اعتداء",
                            Description = "Physical attack or threat of violence against a person.",
                            Name = "Assault"
                        },
                        new
                        {
                            Id = 4,
                            AR_Des = "تدمير أو إتلاف متعمد للممتلكات.",
                            AR_Name = "تخريب",
                            Description = "Deliberate destruction or damage to property.",
                            Name = "Vandalism"
                        },
                        new
                        {
                            Id = 5,
                            AR_Des = "معاملة غير عادلة بناءً على العرق أو الجنس أو الدين أو الإعاقة أو غيرها من الخصائص المحمية.",
                            AR_Name = "تمييز",
                            Description = "Unfair treatment based on race, gender, religion, disability, or other protected characteristics.",
                            Name = "Discrimination"
                        },
                        new
                        {
                            Id = 6,
                            AR_Des = "تخويف أو إساءة أو إذلال متعمد لشخص آخر.",
                            AR_Name = "تنمر",
                            Description = "Intentional intimidation, abuse, or humiliation of another person.",
                            Name = "Bullying"
                        },
                        new
                        {
                            Id = 7,
                            AR_Des = "سلوك جنسي غير مرغوب فيه، بما في ذلك التحرش أو الاعتداء أو الاستغلال.",
                            AR_Name = "سوء سلوك جنسي",
                            Description = "Unwelcome sexual behavior, including harassment, assault, or exploitation.",
                            Name = "Sexual Misconduct"
                        },
                        new
                        {
                            Id = 8,
                            AR_Des = "إساءة استخدام السلطة الموكلة لتحقيق مكاسب شخصية.",
                            AR_Name = "فساد",
                            Description = "Abuse of entrusted power for private gain.",
                            Name = "Corruption"
                        },
                        new
                        {
                            Id = 9,
                            AR_Des = "إزعاج بسبب الموسيقى الصاخبة أو الحفلات أو البناء وما إلى ذلك.",
                            AR_Name = "شكوى ضوضاء",
                            Description = "Disturbance due to loud music, parties, construction, etc.",
                            Name = "Noise Complaint"
                        },
                        new
                        {
                            Id = 10,
                            AR_Des = "التخلص غير السليم من النفايات في الأماكن العامة أو الخاصة.",
                            AR_Name = "رمي النفايات",
                            Description = "Improper disposal of waste in public or private areas.",
                            Name = "Littering"
                        },
                        new
                        {
                            Id = 11,
                            AR_Des = "أفعال غير آمنة أو غير قانونية من قبل السائقين مثل السرعة أو تجاهل الإشارات.",
                            AR_Name = "مخالفة مرورية",
                            Description = "Unsafe or illegal actions by drivers, such as speeding or ignoring signals.",
                            Name = "Traffic Violation"
                        },
                        new
                        {
                            Id = 12,
                            AR_Des = "دخول ممتلكات شخص ما دون إذن.",
                            AR_Name = "تعدي",
                            Description = "Entering someone's property without permission.",
                            Name = "Trespassing"
                        },
                        new
                        {
                            Id = 13,
                            AR_Des = "تحرش أو إساءة من خلال وسائل الاتصال الرقمية.",
                            AR_Name = "تنمر إلكتروني",
                            Description = "Harassment or abuse through digital communication.",
                            Name = "Cyberbullying"
                        },
                        new
                        {
                            Id = 14,
                            AR_Des = "خداع غير قانوني أو إجرامي يهدف لتحقيق مكاسب مالية أو شخصية.",
                            AR_Name = "احتيال",
                            Description = "Wrongful or criminal deception intended to result in financial or personal gain.",
                            Name = "Fraud"
                        },
                        new
                        {
                            Id = 15,
                            AR_Des = "استخدام أو حيازة غير قانونية للمخدرات أو الكحول.",
                            AR_Name = "تعاطي مواد",
                            Description = "Illegal use or possession of drugs or alcohol.",
                            Name = "Substance Abuse"
                        },
                        new
                        {
                            Id = 16,
                            AR_Des = "تقديم أو قبول شيء ذي قيمة مقابل التأثير أو اتخاذ إجراء.",
                            AR_Name = "رشوة",
                            Description = "Offering or accepting something of value in exchange for influence or action.",
                            Name = "Bribery"
                        },
                        new
                        {
                            Id = 17,
                            AR_Des = "أفعال تنتهك المعايير الأخلاقية أو المهنية.",
                            AR_Name = "سلوك غير أخلاقي",
                            Description = "Actions that violate moral or professional standards.",
                            Name = "Unethical Behavior"
                        },
                        new
                        {
                            Id = 18,
                            AR_Des = "تهديدات أو أعمال عنف في بيئة مهنية.",
                            AR_Name = "عنف في مكان العمل",
                            Description = "Threats or acts of violence in a professional environment.",
                            Name = "Workplace Violence"
                        },
                        new
                        {
                            Id = 19,
                            AR_Des = "تدمير أو تشويه الممتلكات الشخصية أو العامة.",
                            AR_Name = "تلف الممتلكات",
                            Description = "Destruction or defacement of personal or public property.",
                            Name = "Property Damage"
                        },
                        new
                        {
                            Id = 20,
                            AR_Des = "أي شكوى لا تندرج ضمن الفئات المحددة مسبقًا.",
                            AR_Name = "أخرى",
                            Description = "Any complaint that does not fit in the predefined categories.",
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("complaints_back.models.Complaints.Complaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ComplainDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ComplainDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ComplainStatus")
                        .HasColumnType("int");

                    b.Property<string>("ComplainTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriesId");

                    b.HasIndex("UserId");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("complaints_back.models.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("complaints_back.models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("complaints_back.models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("complaints_back.models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("complaints_back.models.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("complaints_back.models.Complaints.Complaint", b =>
                {
                    b.HasOne("complaints_back.models.Categories", "Categories")
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("complaints_back.models.Users.User", "User")
                        .WithMany("Complaints")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categories");

                    b.Navigation("User");
                });

            modelBuilder.Entity("complaints_back.models.Users.User", b =>
                {
                    b.Navigation("Complaints");
                });
#pragma warning restore 612, 618
        }
    }
}
